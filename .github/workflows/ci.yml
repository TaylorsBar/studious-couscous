name: CI/CD Pipeline

on:
  push:
    branches: [main, develop]
  pull_request:
    branches: [main, develop]

env:
  NODE_VERSION: '18.x'
  PNPM_VERSION: '8.x'

jobs:
  # Code Quality and Security
  quality:
    name: Code Quality & Security
    runs-on: ubuntu-latest
    
    steps:
      - name: Checkout code
        uses: actions/checkout@v4
        with:
          fetch-depth: 0

      - name: Setup Node.js
        uses: actions/setup-node@v4
        with:
          node-version: ${{ env.NODE_VERSION }}
          cache: 'npm'

      - name: Install dependencies
        run: |
          npm ci
          cd client && npm ci
          cd ../server && npm ci

      - name: Run ESLint
        run: |
          npm run lint:client
          npm run lint:server

      - name: Run Prettier
        run: |
          npx prettier --check .

      - name: TypeScript Check
        run: |
          cd client && npm run type-check
          cd ../server && npm run type-check

      - name: Security Audit
        run: |
          npm audit --audit-level=moderate
          cd client && npm audit --audit-level=moderate
          cd ../server && npm audit --audit-level=moderate

  # Frontend Tests
  frontend-tests:
    name: Frontend Tests
    runs-on: ubuntu-latest
    
    steps:
      - name: Checkout code
        uses: actions/checkout@v4

      - name: Setup Node.js
        uses: actions/setup-node@v4
        with:
          node-version: ${{ env.NODE_VERSION }}
          cache: 'npm'

      - name: Install dependencies
        run: |
          npm ci
          cd client && npm ci

      - name: Run unit tests
        run: |
          cd client && npm run test:coverage

      - name: Upload coverage reports
        uses: codecov/codecov-action@v3
        with:
          file: ./client/coverage/lcov.info
          flags: frontend
          name: frontend-coverage

  # Backend Tests
  backend-tests:
    name: Backend Tests
    runs-on: ubuntu-latest
    
    services:
      postgres:
        image: postgres:15
        env:
          POSTGRES_PASSWORD: postgres
          POSTGRES_USER: postgres
          POSTGRES_DB: studious_couscous_test
        options: >-
          --health-cmd pg_isready
          --health-interval 10s
          --health-timeout 5s
          --health-retries 5
        ports:
          - 5432:5432
      
      redis:
        image: redis:7-alpine
        ports:
          - 6379:6379
        options: >-
          --health-cmd "redis-cli ping"
          --health-interval 10s
          --health-timeout 5s
          --health-retries 5

    steps:
      - name: Checkout code
        uses: actions/checkout@v4

      - name: Setup Node.js
        uses: actions/setup-node@v4
        with:
          node-version: ${{ env.NODE_VERSION }}
          cache: 'npm'

      - name: Install dependencies
        run: |
          npm ci
          cd server && npm ci

      - name: Setup database
        run: |
          cd server && npx prisma migrate deploy
        env:
          DATABASE_URL: postgresql://postgres:postgres@localhost:5432/studious_couscous_test

      - name: Run backend tests
        run: |
          cd server && npm run test:coverage
        env:
          NODE_ENV: test
          DATABASE_URL: postgresql://postgres:postgres@localhost:5432/studious_couscous_test
          REDIS_URL: redis://localhost:6379
          JWT_SECRET: test-jwt-secret-key-for-github-actions
          JWT_REFRESH_SECRET: test-jwt-refresh-secret-key-for-github-actions
          SESSION_SECRET: test-session-secret-key-for-github-actions
          API_KEY_SECRET: test-api-key-secret-for-github-actions
          WEBHOOK_SECRET: test-webhook-secret-for-github-actions
          CORS_ORIGIN: http://localhost:3000

      - name: Upload coverage reports
        uses: codecov/codecov-action@v3
        with:
          file: ./server/coverage/lcov.info
          flags: backend
          name: backend-coverage

  # E2E Tests
  e2e-tests:
    name: E2E Tests
    runs-on: ubuntu-latest
    
    services:
      postgres:
        image: postgres:15
        env:
          POSTGRES_PASSWORD: postgres
          POSTGRES_USER: postgres
          POSTGRES_DB: studious_couscous_e2e
        options: >-
          --health-cmd pg_isready
          --health-interval 10s
          --health-timeout 5s
          --health-retries 5
        ports:
          - 5432:5432
      
      redis:
        image: redis:7-alpine
        ports:
          - 6379:6379
        options: >-
          --health-cmd "redis-cli ping"
          --health-interval 10s
          --health-timeout 5s
          --health-retries 5

    steps:
      - name: Checkout code
        uses: actions/checkout@v4

      - name: Setup Node.js
        uses: actions/setup-node@v4
        with:
          node-version: ${{ env.NODE_VERSION }}
          cache: 'npm'

      - name: Install dependencies
        run: |
          npm ci
          cd client && npm ci
          cd ../server && npm ci

      - name: Setup database
        run: |
          cd server && npx prisma migrate deploy
        env:
          DATABASE_URL: postgresql://postgres:postgres@localhost:5432/studious_couscous_e2e

      - name: Build applications
        run: |
          npm run build
        env:
          NODE_ENV: production
          DATABASE_URL: postgresql://postgres:postgres@localhost:5432/studious_couscous_e2e
          REDIS_URL: redis://localhost:6379
          JWT_SECRET: test-jwt-secret-key-for-github-actions
          JWT_REFRESH_SECRET: test-jwt-refresh-secret-key-for-github-actions
          SESSION_SECRET: test-session-secret-key-for-github-actions
          API_KEY_SECRET: test-api-key-secret-for-github-actions
          WEBHOOK_SECRET: test-webhook-secret-for-github-actions
          CORS_ORIGIN: http://localhost:3000
          REACT_APP_API_URL: http://localhost:3001

      - name: Start applications
        run: |
          npm start &
          sleep 30
        env:
          NODE_ENV: production
          DATABASE_URL: postgresql://postgres:postgres@localhost:5432/studious_couscous_e2e
          REDIS_URL: redis://localhost:6379
          JWT_SECRET: test-jwt-secret-key-for-github-actions
          JWT_REFRESH_SECRET: test-jwt-refresh-secret-key-for-github-actions
          SESSION_SECRET: test-session-secret-key-for-github-actions
          API_KEY_SECRET: test-api-key-secret-for-github-actions
          WEBHOOK_SECRET: test-webhook-secret-for-github-actions
          CORS_ORIGIN: http://localhost:3000
          REACT_APP_API_URL: http://localhost:3001

      - name: Run E2E tests
        run: |
          cd client && npm run test:e2e:headless

      - name: Upload E2E artifacts
        uses: actions/upload-artifact@v4
        if: failure()
        with:
          name: cypress-screenshots
          path: client/cypress/screenshots

  # Build and Deploy
  build-and-deploy:
    name: Build & Deploy
    needs: [quality, frontend-tests, backend-tests, e2e-tests]
    runs-on: ubuntu-latest
    if: github.ref == 'refs/heads/main' && github.event_name == 'push'
    
    steps:
      - name: Checkout code
        uses: actions/checkout@v4

      - name: Setup Node.js
        uses: actions/setup-node@v4
        with:
          node-version: ${{ env.NODE_VERSION }}
          cache: 'npm'

      - name: Install dependencies
        run: |
          npm ci
          cd client && npm ci
          cd ../server && npm ci

      - name: Build applications
        run: |
          npm run build
        env:
          NODE_ENV: production
          REACT_APP_API_URL: ${{ secrets.REACT_APP_API_URL }}

      - name: Build Docker images
        run: |
          docker build -t studious-couscous-client:latest ./client
          docker build -t studious-couscous-server:latest ./server

      - name: Run security scan
        uses: aquasecurity/trivy-action@master
        with:
          image-ref: 'studious-couscous-server:latest'
          format: 'sarif'
          output: 'trivy-results.sarif'

      - name: Upload security scan results
        uses: github/codeql-action/upload-sarif@v2
        with:
          sarif_file: 'trivy-results.sarif'

      - name: Deploy to staging
        if: github.ref == 'refs/heads/develop'
        run: |
          echo "Deploying to staging environment..."
          # Add your staging deployment logic here

      - name: Deploy to production
        if: github.ref == 'refs/heads/main'
        run: |
          echo "Deploying to production environment..."
          # Add your production deployment logic here

  # Dependency Update Check
  dependency-check:
    name: Dependency Update Check
    runs-on: ubuntu-latest
    if: github.event_name == 'schedule'
    
    steps:
      - name: Checkout code
        uses: actions/checkout@v4

      - name: Setup Node.js
        uses: actions/setup-node@v4
        with:
          node-version: ${{ env.NODE_VERSION }}
          cache: 'npm'

      - name: Check for outdated dependencies
        run: |
          npm outdated
          cd client && npm outdated
          cd ../server && npm outdated

      - name: Create issue for outdated dependencies
        if: failure()
        uses: actions/github-script@v6
        with:
          script: |
            github.rest.issues.create({
              owner: context.repo.owner,
              repo: context.repo.repo,
              title: 'Outdated Dependencies Found',
              body: 'Automated dependency check found outdated packages. Please review and update.',
              labels: ['dependencies', 'maintenance']
            })

  # Performance Testing
  performance:
    name: Performance Testing
    runs-on: ubuntu-latest
    if: github.event_name == 'pull_request'
    
    steps:
      - name: Checkout code
        uses: actions/checkout@v4

      - name: Setup Node.js
        uses: actions/setup-node@v4
        with:
          node-version: ${{ env.NODE_VERSION }}
          cache: 'npm'

      - name: Install dependencies
        run: |
          npm ci
          cd client && npm ci

      - name: Build client
        run: |
          cd client && npm run build

      - name: Audit bundle size
        run: |
          cd client && npx bundlesize

      - name: Run Lighthouse CI
        uses: treosh/lighthouse-ci-action@v10
        with:
          configPath: './lighthouse.config.js'
          uploadArtifacts: true
          temporaryPublicStorage: true