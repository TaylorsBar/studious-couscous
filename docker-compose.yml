version: '3.8'

services:
  # ================================
  # CORE APPLICATION SERVICES
  # ================================
  
  # PostgreSQL Database
  postgres:
    image: postgres:15-alpine
    container_name: karapiro-cartel-postgres
    environment:
      POSTGRES_DB: karapiro_cartel
      POSTGRES_USER: karapiro_user
      POSTGRES_PASSWORD: karapiro_password
      POSTGRES_INITDB_ARGS: "--encoding=UTF8 --locale=C"
    volumes:
      - postgres_data:/var/lib/postgresql/data
      - ./server/prisma/init.sql:/docker-entrypoint-initdb.d/init.sql
    ports:
      - "5432:5432"
    networks:
      - karapiro-network
    restart: unless-stopped
    healthcheck:
      test: ["CMD-SHELL", "pg_isready -U karapiro_user -d karapiro_cartel"]
      interval: 10s
      timeout: 5s
      retries: 5

  # Redis Cache
  redis:
    image: redis:7-alpine
    container_name: karapiro-cartel-redis
    command: redis-server --appendonly yes --requirepass karapiro_redis_password
    volumes:
      - redis_data:/data
    ports:
      - "6379:6379"
    networks:
      - karapiro-network
    restart: unless-stopped
    healthcheck:
      test: ["CMD", "redis-cli", "--raw", "incr", "ping"]
      interval: 10s
      timeout: 5s
      retries: 5

  # Backend API Server
  server:
    build:
      context: ./server
      dockerfile: Dockerfile
    container_name: karapiro-cartel-server
    environment:
      NODE_ENV: production
      PORT: 3001
      DATABASE_URL: postgresql://karapiro_user:karapiro_password@postgres:5432/karapiro_cartel
      REDIS_URL: redis://:karapiro_redis_password@redis:6379
      JWT_SECRET: ${JWT_SECRET:-karapiro-jwt-secret-change-in-production}
      JWT_REFRESH_SECRET: ${JWT_REFRESH_SECRET:-karapiro-refresh-secret-change-in-production}
      CORS_ORIGIN: ${CORS_ORIGIN:-http://localhost:3000}
      
      # Hedera Configuration
      HEDERA_NETWORK: ${HEDERA_NETWORK:-testnet}
      HEDERA_OPERATOR_ID: ${HEDERA_OPERATOR_ID}
      HEDERA_OPERATOR_KEY: ${HEDERA_OPERATOR_KEY}
      
      # Kafka Configuration
      KAFKA_BROKERS: kafka:9092
      
      # CRM Configuration
      SALESFORCE_USERNAME: ${SALESFORCE_USERNAME}
      SALESFORCE_PASSWORD: ${SALESFORCE_PASSWORD}
      SALESFORCE_SECURITY_TOKEN: ${SALESFORCE_SECURITY_TOKEN}
      SALESFORCE_CLIENT_ID: ${SALESFORCE_CLIENT_ID}
      SALESFORCE_CLIENT_SECRET: ${SALESFORCE_CLIENT_SECRET}
      
      # Financial Configuration
      XERO_CLIENT_ID: ${XERO_CLIENT_ID}
      XERO_CLIENT_SECRET: ${XERO_CLIENT_SECRET}
      STRIPE_SECRET_KEY: ${STRIPE_SECRET_KEY}
    ports:
      - "3001:3001"
    volumes:
      - ./server/uploads:/app/uploads
      - ./server/logs:/app/logs
    depends_on:
      postgres:
        condition: service_healthy
      redis:
        condition: service_healthy
      kafka:
        condition: service_started
    networks:
      - karapiro-network
    restart: unless-stopped
    healthcheck:
      test: ["CMD", "curl", "-f", "http://localhost:3001/health"]
      interval: 30s
      timeout: 10s
      retries: 3

  # Frontend React Application
  client:
    build:
      context: ./client
      dockerfile: Dockerfile
    container_name: karapiro-cartel-client
    environment:
      REACT_APP_API_URL: ${REACT_APP_API_URL:-http://localhost:3001}
      REACT_APP_WS_URL: ${REACT_APP_WS_URL:-ws://localhost:3001}
      REACT_APP_HEDERA_NETWORK: ${HEDERA_NETWORK:-testnet}
      REACT_APP_STRIPE_PUBLISHABLE_KEY: ${STRIPE_PUBLISHABLE_KEY}
    ports:
      - "3000:3000"
    depends_on:
      - server
    networks:
      - karapiro-network
    restart: unless-stopped

  # ================================
  # MESSAGE QUEUE & EVENT STREAMING
  # ================================
  
  # Zookeeper for Kafka
  zookeeper:
    image: confluentinc/cp-zookeeper:7.4.0
    container_name: karapiro-cartel-zookeeper
    environment:
      ZOOKEEPER_CLIENT_PORT: 2181
      ZOOKEEPER_TICK_TIME: 2000
    volumes:
      - zookeeper_data:/var/lib/zookeeper/data
      - zookeeper_logs:/var/lib/zookeeper/log
    networks:
      - karapiro-network
    restart: unless-stopped

  # Kafka Event Streaming
  kafka:
    image: confluentinc/cp-kafka:7.4.0
    container_name: karapiro-cartel-kafka
    depends_on:
      - zookeeper
    environment:
      KAFKA_BROKER_ID: 1
      KAFKA_ZOOKEEPER_CONNECT: zookeeper:2181
      KAFKA_ADVERTISED_LISTENERS: PLAINTEXT://kafka:9092,PLAINTEXT_HOST://localhost:29092
      KAFKA_LISTENER_SECURITY_PROTOCOL_MAP: PLAINTEXT:PLAINTEXT,PLAINTEXT_HOST:PLAINTEXT
      KAFKA_INTER_BROKER_LISTENER_NAME: PLAINTEXT
      KAFKA_OFFSETS_TOPIC_REPLICATION_FACTOR: 1
      KAFKA_AUTO_CREATE_TOPICS_ENABLE: true
      KAFKA_DELETE_TOPIC_ENABLE: true
    volumes:
      - kafka_data:/var/lib/kafka/data
    ports:
      - "29092:29092"
    networks:
      - karapiro-network
    restart: unless-stopped
    healthcheck:
      test: ["CMD-SHELL", "kafka-topics --bootstrap-server localhost:9092 --list"]
      interval: 30s
      timeout: 10s
      retries: 5

  # Kafka UI for Management
  kafka-ui:
    image: provectuslabs/kafka-ui:latest
    container_name: karapiro-cartel-kafka-ui
    depends_on:
      - kafka
    environment:
      KAFKA_CLUSTERS_0_NAME: karapiro-cartel
      KAFKA_CLUSTERS_0_BOOTSTRAPSERVERS: kafka:9092
      KAFKA_CLUSTERS_0_ZOOKEEPER: zookeeper:2181
    ports:
      - "8080:8080"
    networks:
      - karapiro-network
    restart: unless-stopped

  # ================================
  # MONITORING & OBSERVABILITY
  # ================================
  
  # Prometheus Metrics
  prometheus:
    image: prom/prometheus:latest
    container_name: karapiro-cartel-prometheus
    command:
      - '--config.file=/etc/prometheus/prometheus.yml'
      - '--storage.tsdb.path=/prometheus'
      - '--web.console.libraries=/etc/prometheus/console_libraries'
      - '--web.console.templates=/etc/prometheus/consoles'
      - '--storage.tsdb.retention.time=200h'
      - '--web.enable-lifecycle'
    volumes:
      - ./monitoring/prometheus.yml:/etc/prometheus/prometheus.yml
      - prometheus_data:/prometheus
    ports:
      - "9090:9090"
    networks:
      - karapiro-network
    restart: unless-stopped

  # Grafana Dashboard
  grafana:
    image: grafana/grafana:latest
    container_name: karapiro-cartel-grafana
    environment:
      GF_SECURITY_ADMIN_PASSWORD: ${GRAFANA_PASSWORD:-admin}
      GF_USERS_ALLOW_SIGN_UP: false
      GF_INSTALL_PLUGINS: grafana-clock-panel,grafana-simple-json-datasource
    volumes:
      - grafana_data:/var/lib/grafana
      - ./monitoring/grafana/dashboards:/etc/grafana/provisioning/dashboards
      - ./monitoring/grafana/datasources:/etc/grafana/provisioning/datasources
    ports:
      - "3003:3000"
    depends_on:
      - prometheus
    networks:
      - karapiro-network
    restart: unless-stopped

  # ================================
  # BLOCKCHAIN & CRYPTO SERVICES
  # ================================
  
  # Hedera Mirror Node (Local Development)
  hedera-mirror:
    image: hashgraph/hedera-mirror-node:latest
    container_name: karapiro-cartel-hedera-mirror
    environment:
      HEDERA_MIRROR_IMPORTER_NETWORK: testnet
      HEDERA_MIRROR_IMPORTER_STARTDATE: 2024-01-01T00:00:00Z
      SPRING_DATASOURCE_URL: jdbc:postgresql://postgres:5432/hedera_mirror
      SPRING_DATASOURCE_USERNAME: karapiro_user
      SPRING_DATASOURCE_PASSWORD: karapiro_password
    depends_on:
      - postgres
    networks:
      - karapiro-network
    restart: unless-stopped
    profiles:
      - blockchain

  # ================================
  # DEVELOPMENT & TESTING SERVICES
  # ================================
  
  # Mailhog for Email Testing
  mailhog:
    image: mailhog/mailhog:latest
    container_name: karapiro-cartel-mailhog
    ports:
      - "1025:1025"  # SMTP
      - "8025:8025"  # Web UI
    networks:
      - karapiro-network
    restart: unless-stopped
    profiles:
      - development

  # MinIO for S3-compatible Storage
  minio:
    image: minio/minio:latest
    container_name: karapiro-cartel-minio
    command: server /data --console-address ":9001"
    environment:
      MINIO_ROOT_USER: ${MINIO_ROOT_USER:-minioadmin}
      MINIO_ROOT_PASSWORD: ${MINIO_ROOT_PASSWORD:-minioadmin}
    volumes:
      - minio_data:/data
    ports:
      - "9000:9000"
      - "9001:9001"
    networks:
      - karapiro-network
    restart: unless-stopped
    profiles:
      - storage

  # ================================
  # REVERSE PROXY & LOAD BALANCER
  # ================================
  
  # Nginx Reverse Proxy
  nginx:
    image: nginx:alpine
    container_name: karapiro-cartel-nginx
    volumes:
      - ./nginx/nginx.conf:/etc/nginx/nginx.conf
      - ./nginx/conf.d:/etc/nginx/conf.d
      - ./nginx/ssl:/etc/nginx/ssl
    ports:
      - "80:80"
      - "443:443"
    depends_on:
      - server
      - client
    networks:
      - karapiro-network
    restart: unless-stopped
    profiles:
      - production

  # ================================
  # BACKUP & RECOVERY SERVICES
  # ================================
  
  # Database Backup Service
  postgres-backup:
    image: prodrigestivill/postgres-backup-local:latest
    container_name: karapiro-cartel-backup
    environment:
      POSTGRES_HOST: postgres
      POSTGRES_DB: karapiro_cartel
      POSTGRES_USER: karapiro_user
      POSTGRES_PASSWORD: karapiro_password
      POSTGRES_EXTRA_OPTS: '-Z 9 --schema=public --blobs'
      SCHEDULE: '@daily'
      BACKUP_KEEP_DAYS: 30
      BACKUP_KEEP_WEEKS: 4
      BACKUP_KEEP_MONTHS: 6
      HEALTHCHECK_PORT: 8080
    volumes:
      - ./backups:/backups
    depends_on:
      - postgres
    networks:
      - karapiro-network
    restart: unless-stopped
    profiles:
      - backup

# ================================
# VOLUMES
# ================================

volumes:
  postgres_data:
    driver: local
  redis_data:
    driver: local
  kafka_data:
    driver: local
  zookeeper_data:
    driver: local
  zookeeper_logs:
    driver: local
  prometheus_data:
    driver: local
  grafana_data:
    driver: local
  minio_data:
    driver: local

# ================================
# NETWORKS
# ================================

networks:
  karapiro-network:
    driver: bridge
    ipam:
      config:
        - subnet: 172.20.0.0/16