// This is your Prisma schema file,
// learn more about it in the docs: https://pris.ly/d/prisma-schema

generator client {
  provider = "prisma-client-js"
}

datasource db {
  provider = "postgresql"
  url      = env("DATABASE_URL")
}

model User {
  id                String   @id @default(cuid())
  email             String   @unique
  username          String   @unique
  firstName         String
  lastName          String
  password          String
  avatar            String?
  bio               String?
  timezone          String   @default("UTC")
  language          String   @default("en")
  theme             String   @default("light")
  isEmailVerified   Boolean  @default(false)
  isActive          Boolean  @default(true)
  lastLoginAt       DateTime?
  emailVerifiedAt   DateTime?
  passwordChangedAt DateTime?
  createdAt         DateTime @default(now())
  updatedAt         DateTime @updatedAt

  // Relations
  ownedProjects     Project[]       @relation("ProjectOwner")
  projectMembers    ProjectMember[]
  assignedTasks     Task[]          @relation("TaskAssignee")
  createdTasks      Task[]          @relation("TaskCreator")
  comments          Comment[]
  notifications     Notification[]
  files             File[]
  teamMemberships   TeamMember[]
  activityLogs      ActivityLog[]
  sentMessages      Message[]       @relation("MessageSender")
  receivedMessages  Message[]       @relation("MessageReceiver")

  @@map("users")
}

model Project {
  id          String        @id @default(cuid())
  name        String
  description String?
  slug        String        @unique
  color       String        @default("#3B82F6")
  status      ProjectStatus @default(ACTIVE)
  priority    Priority      @default(MEDIUM)
  startDate   DateTime?
  endDate     DateTime?
  budget      Float?
  progress    Float         @default(0)
  isArchived  Boolean       @default(false)
  createdAt   DateTime      @default(now())
  updatedAt   DateTime      @updatedAt

  // Relations
  owner     User            @relation("ProjectOwner", fields: [ownerId], references: [id])
  ownerId   String
  members   ProjectMember[]
  tasks     Task[]
  files     File[]
  comments  Comment[]
  logs      ActivityLog[]
  teams     TeamProject[]

  @@map("projects")
}

model ProjectMember {
  id        String      @id @default(cuid())
  role      ProjectRole @default(MEMBER)
  joinedAt  DateTime    @default(now())
  updatedAt DateTime    @updatedAt

  // Relations
  user      User    @relation(fields: [userId], references: [id])
  userId    String
  project   Project @relation(fields: [projectId], references: [id])
  projectId String

  @@unique([userId, projectId])
  @@map("project_members")
}

model Task {
  id          String     @id @default(cuid())
  title       String
  description String?
  status      TaskStatus @default(TODO)
  priority    Priority   @default(MEDIUM)
  type        TaskType   @default(TASK)
  points      Int?
  position    Float      @default(0)
  dueDate     DateTime?
  completedAt DateTime?
  createdAt   DateTime   @default(now())
  updatedAt   DateTime   @updatedAt

  // Relations
  project     Project       @relation(fields: [projectId], references: [id])
  projectId   String
  assignee    User?         @relation("TaskAssignee", fields: [assigneeId], references: [id])
  assigneeId  String?
  creator     User          @relation("TaskCreator", fields: [creatorId], references: [id])
  creatorId   String
  parent      Task?         @relation("TaskDependency", fields: [parentId], references: [id])
  parentId    String?
  subtasks    Task[]        @relation("TaskDependency")
  comments    Comment[]
  files       File[]
  logs        ActivityLog[]
  labels      TaskLabel[]

  @@map("tasks")
}

model TaskLabel {
  id        String   @id @default(cuid())
  name      String
  color     String   @default("#6B7280")
  createdAt DateTime @default(now())

  // Relations
  tasks Task[]

  @@map("task_labels")
}

model Comment {
  id        String   @id @default(cuid())
  content   String
  createdAt DateTime @default(now())
  updatedAt DateTime @updatedAt

  // Relations
  author    User     @relation(fields: [authorId], references: [id])
  authorId  String
  task      Task?    @relation(fields: [taskId], references: [id])
  taskId    String?
  project   Project? @relation(fields: [projectId], references: [id])
  projectId String?

  @@map("comments")
}

model File {
  id           String   @id @default(cuid())
  originalName String
  filename     String
  mimetype     String
  size         Int
  path         String
  url          String?
  description  String?
  createdAt    DateTime @default(now())
  updatedAt    DateTime @updatedAt

  // Relations
  uploader  User     @relation(fields: [uploaderId], references: [id])
  uploaderId String
  project   Project? @relation(fields: [projectId], references: [id])
  projectId String?
  task      Task?    @relation(fields: [taskId], references: [id])
  taskId    String?

  @@map("files")
}

model Team {
  id          String   @id @default(cuid())
  name        String
  description String?
  color       String   @default("#8B5CF6")
  isActive    Boolean  @default(true)
  createdAt   DateTime @default(now())
  updatedAt   DateTime @updatedAt

  // Relations
  members  TeamMember[]
  projects TeamProject[]

  @@map("teams")
}

model TeamMember {
  id        String   @id @default(cuid())
  role      TeamRole @default(MEMBER)
  joinedAt  DateTime @default(now())
  updatedAt DateTime @updatedAt

  // Relations
  user   User   @relation(fields: [userId], references: [id])
  userId String
  team   Team   @relation(fields: [teamId], references: [id])
  teamId String

  @@unique([userId, teamId])
  @@map("team_members")
}

model TeamProject {
  id        String   @id @default(cuid())
  createdAt DateTime @default(now())

  // Relations
  team      Team    @relation(fields: [teamId], references: [id])
  teamId    String
  project   Project @relation(fields: [projectId], references: [id])
  projectId String

  @@unique([teamId, projectId])
  @@map("team_projects")
}

model Notification {
  id        String           @id @default(cuid())
  title     String
  message   String
  type      NotificationType @default(INFO)
  isRead    Boolean          @default(false)
  data      Json?
  createdAt DateTime         @default(now())
  readAt    DateTime?

  // Relations
  user   User   @relation(fields: [userId], references: [id])
  userId String

  @@map("notifications")
}

model ActivityLog {
  id        String       @id @default(cuid())
  action    String
  details   String?
  metadata  Json?
  createdAt DateTime     @default(now())

  // Relations
  user      User     @relation(fields: [userId], references: [id])
  userId    String
  project   Project? @relation(fields: [projectId], references: [id])
  projectId String?
  task      Task?    @relation(fields: [taskId], references: [id])
  taskId    String?

  @@map("activity_logs")
}

model Message {
  id        String      @id @default(cuid())
  content   String
  type      MessageType @default(TEXT)
  isRead    Boolean     @default(false)
  createdAt DateTime    @default(now())
  readAt    DateTime?

  // Relations
  sender     User   @relation("MessageSender", fields: [senderId], references: [id])
  senderId   String
  receiver   User   @relation("MessageReceiver", fields: [receiverId], references: [id])
  receiverId String

  @@map("messages")
}

model ApiKey {
  id        String   @id @default(cuid())
  name      String
  key       String   @unique
  isActive  Boolean  @default(true)
  lastUsed  DateTime?
  expiresAt DateTime?
  createdAt DateTime @default(now())
  updatedAt DateTime @updatedAt

  @@map("api_keys")
}

model Session {
  id        String   @id @default(cuid())
  sessionId String   @unique
  data      String
  expiresAt DateTime
  createdAt DateTime @default(now())
  updatedAt DateTime @updatedAt

  @@map("sessions")
}

// Enums
enum ProjectStatus {
  ACTIVE
  ON_HOLD
  COMPLETED
  CANCELLED
}

enum ProjectRole {
  ADMIN
  MANAGER
  MEMBER
  VIEWER
}

enum TaskStatus {
  TODO
  IN_PROGRESS
  IN_REVIEW
  DONE
  CANCELLED
}

enum TaskType {
  TASK
  BUG
  FEATURE
  IMPROVEMENT
  RESEARCH
}

enum Priority {
  LOW
  MEDIUM
  HIGH
  URGENT
}

enum TeamRole {
  ADMIN
  MANAGER
  MEMBER
}

enum NotificationType {
  INFO
  SUCCESS
  WARNING
  ERROR
  MENTION
  ASSIGNMENT
  DEADLINE
  COMMENT
  STATUS_CHANGE
}

enum MessageType {
  TEXT
  FILE
  IMAGE
  SYSTEM
}